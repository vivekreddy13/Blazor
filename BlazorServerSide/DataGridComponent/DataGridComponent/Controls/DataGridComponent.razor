@typeparam TItem

<table class="table is-fullwidth">
    <thead>
        <tr>
            @if (Columns == null || Columns.Count <= 0)
            {

            }
            else
            {
                foreach (var column in Columns)
                {
                    @if (column.Alignment != Alignment.NotSet)
                    {
                        switch (column.Alignment)
                        {
                            case Alignment.Left:
                                <th class="align-left">@column.Caption</th>
                                break;
                            case Alignment.Center:
                                <th class="align-center">@column.Caption</th>
                                break;
                            case Alignment.Right:
                                <th class="align-right">@column.Caption</th>
                                break;
                            case Alignment.NotSet:
                            default:
                                <th>@column.Caption</th>
                                break;
                        }
                    }
                    else
                    {
                        <th>
                            @column.Caption
                        </th>
                    }


                }
            }
        </tr>
    </thead>
    <tbody>
        @foreach(var item in DataItems.Skip(Paging.NumOfItemsToSkip(CurrentPageNumber))
            .Take(Paging.NumOfItemsToTake(DataItems.Count)))
        {
        <tr>
            @foreach (var column in Columns)
            {
                @if (!string.IsNullOrWhiteSpace(column.Format) && column.DataType != DataType.NotSet)
                {
                    string value = string.Empty;
                    switch (column.DataType)
                    {
                        case DataType.DateTime:
                            value = DateTime.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString(column.Format);
                            break;
                        case DataType.Boolean:
                            value = bool.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString();

                            break;
                        case DataType.Currency:
                            value = Math.Round(double.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()), 2).ToString("c");
                            break;
                        default:
                            break;

                    }
                    @if (column.Alignment != Alignment.NotSet)
                    {
                        <td align="@column.Alignment.ToString().ToLower()">@value</td>
                    }
                    else
                    {
                        <td>@value</td>
                    }
                }
                else
                {
                    @if (column.Alignment != Alignment.NotSet)
                    {
                        <td align="@column.Alignment.ToString().ToLower()">@typeof(TItem).GetProperty(column.DataField).GetValue(item)</td>
                    }
                    else
                    {
                        <td>@typeof(TItem).GetProperty(column.DataField).GetValue(item)</td>
                    }

                }
            }
        </tr>
        }
    </tbody>
</table>
<div class="level">
        <div class="level-left">
            <div class="level-item">
                @if (Paging != null && Paging.Enabled)
                {
                    @if (Paging.CustomPager)
                    {
                        @CustomPager
                    }
                    else
                    {
                        <span style="font-size:14px; cursor:pointer" @onclick="GoToPrevPage"><b>&lt;Previous </b></span>
                        <span style="font-size:12px; color:grey">&nbsp;&nbsp;Page @CurrentPageNumber of @Paging.MaxPageNumber(DataItems.Count)&nbsp;&nbsp;</span>
                        <span style="font-size:14px; cursor:pointer" @onclick="GoToNextPage"><b>Next &gt;</b></span>
                    }
                }
            </div>
    </div>
</div>

@code {

    [Parameter]
    public List<TItem> DataItems { get; set; }

    [Parameter]
    public List<ColumnDefinition> Columns { get; set; }

    [Parameter]
    public PagingConfig Paging { get; set; }

    [Parameter]
    public int CurrentPageNumber { get; set; } = 1;

    [Parameter]
    public RenderFragment CustomPager { get; set; }

    public void GoToPrevPage()
    {
        CurrentPageNumber = Paging.PrevPageNumber(CurrentPageNumber);
    }

    public void GoToNextPage()
    {
        CurrentPageNumber = Paging.NextPageNumber(CurrentPageNumber, DataItems.Count);
    }

    public int MaxPageNumber { get => Paging.MaxPageNumber(DataItems.Count); }
}
